openapi: 3.0.0
info:
  title: Demo Image Processing API
  version: 0.0.1
servers:
  - url: <http://localhost>:${PORT:8080}/api/v1
tags:
  - name: Image Controller
    description: Базовый CRUD API для работы с картинками
  - name: Image Filters Controller
    description: Базовый CRUD API для работы с пользовательскими запросами на редактирование картинок
paths:
  /image:
    post:
      tags:
        - Image Controller
      summary: Загрузка нового изображения в систему
      description: |
        В рамках данного метода необходимо:
        1. Провалидировать файл. Максимальный размер файла - 10Мб, поддерживаемые расширения - png, jpeg.
        1. Загрузить файл в S3 хранилище.
        1. Сохранить в БД мета-данные файла - название; размер; ИД файла в S3; ИД пользователя, которому файл принадлежит.
      operationId: uploadImage
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - "file"
              type: "object"
              properties:
                file:
                  type: "string"
                  format: "binary"
        required: true
      responses:
        '200':
          description: Успех выполнения операции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadImageResponse'
        '400':
          description: Файл не прошел валидацию
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiSuccessContainer'
        '500':
          description: Непредвиденная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiSuccessContainer'
  /image/{image-id}:
    get:
      tags:
        - Image Controller
      summary: Скачивание файла по ИД
      description: |
        В рамках данного метода необходимо:
        1. Проверить, есть ли такой файл в системе.
        1. Проверить, доступен ли данный файл пользователю.
        1. Скачать файл.
      operationId: downloadImage
      parameters:
        - name: image-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успех выполнения операции
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '404':
          description: Файл не найден в системе или недоступен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiSuccessContainer'
        '500':
          description: Непредвиденная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiSuccessContainer'
    delete:
      tags:
        - Image Controller
      summary: Удаление файла по ИД
      description: |
        В рамках данного метода необходимо:
        1. Проверить, есть ли такой файл в системе.
        1. Проверить, доступен ли данный файл пользователю.
        1. Удалить файл.
      operationId: deleteImage
      parameters:
        - name: image-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успех выполнения операции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiSuccessContainer'
        '404':
          description: Файл не найден в системе или недоступен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiSuccessContainer'
        '500':
          description: Непредвиденная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiSuccessContainer'
  /images:
    get:
      tags:
        - Image Controller
      summary: Получение списка изображений, которые доступны пользователю
      description: |
        В рамках данного метода необходимо:
        1. Получить мета-информацию о всех изображениях, которые доступны пользователю
      operationId: getImages
      responses:
        '200':
          description: Успех выполнения операции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetImagesResponse'
        '500':
          description: Непредвиденная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiSuccessContainer'
  /image/{image-id}/filters/apply:
    post:
      tags:
        - Image Filters Controller
      summary: Применение указанных фильтров к изображению
      description: |
        В рамках данного метода необходимо:
        1. Проверить, есть ли у пользователя доступ к файлу
        1. Сохранить в БД новый запрос на изменение файла:
            1. статус = WIP
            2. ИД оригинальной картинки = ИД оригинального файла
            3. ИД измененной картинки = null
            4. ИД запроса = уникальный ИД запроса в системе
        1. Отправить в Kafka событие о создании запроса
        1. Убедиться, что шаг 3 выполнен успешно, в противном случае выполнить повторную попытку
        1. Вернуть пользователю ИД его запроса
      operationId: applyImageFilters
      parameters:
        - name: image-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: filters
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              enum:
                # Приведенные ниже фильтры представлены в ознакомительных целях,
                # тут вы можете вставить все, что душе угодно
                - REVERS_COLORS
                - CROP
                - REMOVE_BACKGROUND
                - OTHER
      responses:
        '200':
          description: Успех выполнения операции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyImageFiltersResponse'
        '404':
          description: Файл не найден в системе или недоступен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiSuccessContainer'
        '500':
          description: Непредвиденная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiSuccessContainer'
  /image/{image-id}/filters/{request-id}:
    get:
      tags:
        - Image Filters Controller
      summary: Получение ИД измененного файла по ИД запроса
      description: |
        В рамках данного метода необходимо найти и вернуть по ИД пользовательского запроса 
        ИД соответсвующего ему файла и статус, в котором находится процесс применения фильтров.
        По ИД оригинального изображения нужно убедиться, что ИД запроса относится к нему и 
        что у пользователя есть доступ к данному изображению (оригинальному).
      operationId: getModifiedImageByRequestId
      parameters:
        - name: image-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: request-id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Успех выполнения операции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModifiedImageByRequestIdResponse'
        '404':
          description: Файл не найден в системе или недоступен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiSuccessContainer'
        '500':
          description: Непредвиденная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiSuccessContainer'
components:
  schemas:
    UiSuccessContainer:
      required:
        - success
      type: object
      properties:
        success:
          type: boolean
          description: Признак успеха
        message:
          type: string
          description: Сообщение об ошибке
    UploadImageResponse:
      required:
        - imageId
      type: object
      properties:
        imageId:
          type: string
          format: uuid
          description: ИД файла
    GetImagesResponse:
      required:
        - images
      type: object
      properties:
        images:
          type: array
          description: Список изображений
          items:
            $ref: '#/components/schemas/Image'
    Image:
      required:
        - filename
        - size
      type: object
      properties:
        imageId:
          type: string
          format: uuid
          description: ИД файла
        filename:
          type: string
          description: Название изображения
        size:
          type: integer
          format: int32
          description: Размер файла в байтах
    ApplyImageFiltersResponse:
      required:
        - requestId
      type: object
      properties:
        requestId:
          type: string
          format: uuid
          description: ИД запроса в системе
    GetModifiedImageByRequestIdResponse:
      required:
        - imageId
        - status
      type: object
      properties:
        imageId:
          type: string
          format: uuid
          description: ИД модифицированного или оригинального файла в случае отсутствия первого
        status:
          type: string
          enum:
            - WIP
            - DONE
          description: Статус обработки файла